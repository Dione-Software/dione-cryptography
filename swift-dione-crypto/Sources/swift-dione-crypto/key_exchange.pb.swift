// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/key_exchange.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct KeyExchangeProto_PublicKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of the curve
  var curveType: KeyExchangeProto_PublicKey.Curve = .p256

  /// Public key data, encoded as bytes. With p256 this is ANSI x9.63.
  var publicKeyData: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Curve: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case p256 // = 0
    case curve25519 // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .p256
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .p256
      case 1: self = .curve25519
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .p256: return 0
      case .curve25519: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension KeyExchangeProto_PublicKey.Curve: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [KeyExchangeProto_PublicKey.Curve] = [
    .p256,
    .curve25519,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "key_exchange_proto"

extension KeyExchangeProto_PublicKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PublicKey"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "curveType"),
    3: .same(proto: "publicKeyData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularEnumField(value: &self.curveType) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.publicKeyData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.curveType != .p256 {
      try visitor.visitSingularEnumField(value: self.curveType, fieldNumber: 2)
    }
    if !self.publicKeyData.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKeyData, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KeyExchangeProto_PublicKey, rhs: KeyExchangeProto_PublicKey) -> Bool {
    if lhs.curveType != rhs.curveType {return false}
    if lhs.publicKeyData != rhs.publicKeyData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KeyExchangeProto_PublicKey.Curve: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "P256"),
    1: .same(proto: "Curve25519"),
  ]
}
